<Project Sdk="Microsoft.NET.Sdk">
    <!-- find and replace NeonWhitePlugin -->
    <PropertyGroup>
        <!-- three versions instead of four like most NET apps -->
        <Version>1.0.0</Version>
        <Product>NeonWhiteAP</Product>
        <Authors>Aly</Authors>

        <TargetFramework>netstandard2.0</TargetFramework>
        <LangVersion>latest</LangVersion>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <Nullable>enable</Nullable>
        <RestoreAdditionalProjectSources>
            https://api.nuget.org/v3/index.json;
            https://nuget.bepinex.dev/v3/index.json;
            https://nuget.samboy.dev/v3/index.json
        </RestoreAdditionalProjectSources>
        <PackageId>NeonWhiteAP</PackageId>
        <RootNamespace>NeonWhiteAP</RootNamespace>
    </PropertyGroup>

    <Import Project="$(MSBuildProjectFullPath).user" Condition="Exists('$(MSBuildProjectFullPath).user')"/>

    <PropertyGroup>
        <ManagedPath>$(NeonWhitePath)/Neon White_Data/Managed</ManagedPath>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all" />
        <!-- equivalent to a minecraft access widener -->
        <PackageReference Include="BepInEx.AssemblyPublicizer.MSBuild" Version="0.4.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="BepInEx.Core" Version="5.*" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*" />
    </ItemGroup>

    <ItemGroup>
        <!-- game code -->
        <Reference Include="Assembly-CSharp">
            <HintPath>$(ManagedPath)/Assembly-CSharp.dll</HintPath>
            <Private>false</Private>
            <Publicize>true</Publicize>
        </Reference>
        <!-- unity code or game deps, add as you need -->
        <Reference Include="UnityEngine">
            <HintPath>$(ManagedPath)/UnityEngine.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="UnityEngine.AnimationModule">
            <HintPath>$(ManagedPath)/UnityEngine.AnimationModule.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="UnityEngine.CoreModule">
            <HintPath>$(ManagedPath)/UnityEngine.CoreModule.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="UnityEngine.UI">
            <HintPath>$(ManagedPath)/UnityEngine.UI.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="UnityEngine.UIModule">
            <HintPath>$(ManagedPath)/UnityEngine.UIModule.dll</HintPath>
            <Private>false</Private>
        </Reference>
        <Reference Include="Unity.TextMeshPro">
            <HintPath>$(ManagedPath)/Unity.TextMeshPro.dll</HintPath>
            <Private>false</Private>
        </Reference>
    </ItemGroup>

    <!-- if you're bundling any assets like images -->
    <ItemGroup>
        <Ignore Include="res\**" />
        <EmbeddedResource Include="res\**" />
    </ItemGroup>

    <!-- auto copy to bepinex folder; you don't need this but it's helpful -->
    <Target Name="PostBuild" AfterTargets="PostBuildEvent">
        <Exec Command="xcopy /Y /I &quot;$(TargetDir)&quot; &quot;$(NeonWhitePath)/BepInEx/plugins/NeonWhiteAP&quot;" Condition="'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))'" />
    </Target>
</Project>
